#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const debug = require('debug')('cqproject:server');
var http = require('http');
const db = require('../database/db');

if (process.platform === "win32") {
  const rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.on("SIGINT", async () => {
    process.emit("SIGINT");
    await sleep(10000);
  });
  rl.on("SIGTERM", async () => {
    process.emit("SIGTERM");
    await sleep(10000);
  });
}
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

process.on('SIGTERM', async () => {
  debug('SIGTERM signal received: closing HTTP server')
  try {
    db.dbPool.end(function (err) {
      // all connections in the pool have ended
      console.log('all connections in the pool have ended', err);
    });
    debug('SIGTERM HTTP server closed');
    await sleep(1000);
    process.exit(0);
  } catch (e) {
    console.log(e);
    process.exit(0);
  }
})

process.on("SIGINT", async () => {
  debug('SIGINT signal received: closing HTTP server')
  try {
    db.dbPool.end(function (err) {
      // all connections in the pool have ended
      console.log('all connections in the pool have ended', err);
    });
    debug('SIGINT HTTP server closed');
    await sleep(1000);
    process.exit(0);
  } catch (e) {
    console.log(e);
    process.exit(0);
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('close', onClose);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTP server "close" event.
 */

function onClose() {
  debug('Server Closed');
}